apply plugin: 'com.android.application'

def signingProperties = getSigningProperties()

android {
	compileSdkVersion 25
	buildToolsVersion "25.0.2"

	defaultConfig {
		applicationId "com.voonapp.boilerplate"
		minSdkVersion 15
		targetSdkVersion 25
		versionCode getVersion('code')
		versionName getVersion('name')

		vectorDrawables.useSupportLibrary = true

		jackOptions {
			enabled true
		}

		applicationVariants.all { variant ->
			variant.outputs.each { output ->
				def file = output.outputFile
				def fileName = file.name.replace(".apk", "-v" + versionName + "-c" + versionCode + ".apk")
				output.outputFile = new File(file.parentFile, fileName)
			}
		}
	}

	signingConfigs {
		release {
			keyAlias signingProperties['KEY_ALIAS']
			keyPassword signingProperties['KEY_PASSWORD']
			storeFile file(signingProperties['STORE_FILE'])
			storePassword signingProperties['STORE_PASSWORD']
		}
	}

	buildTypes {
		debug {
			applicationIdSuffix '.debug'
			versionNameSuffix '-DEBUG'
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		release {
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
		}
	}

	aaptOptions {
		ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~'
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	lintOptions {
		abortOnError false
	}
}

dependencies {
	compile 'com.android.support:appcompat-v7:25.1.0'
	// Objects into JSON and vice-versa
	compile 'com.google.code.gson:gson:2.8.0'
	// Networking, caching, and images
	compile 'com.squareup.retrofit2:retrofit:2.1.0'
	compile 'com.squareup.okhttp3:okhttp:3.5.0'
	compile 'com.squareup.picasso:picasso:2.5.2'
	// LeakCanary
	debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
	releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

	// Test Dependencies
	testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.5.0'
}

def getVersion(String type) {
	def major = 0
	def minor = 0
	def patch = 0

	switch (type) {
		case 'code':
			return major * 10000 + minor * 100 + patch
		case 'name':
			return "$major.$minor.$patch"
	}
}

def getSigningProperties() {
	def Properties properties = new Properties();
	def propertiesFile = file('../signing.properties')

	if (propertiesFile.canRead()) {
		properties.load(new FileInputStream(propertiesFile))

		if (properties != null && properties.containsKey('STORE_FILE') && properties.containsKey('STORE_PASSWORD') && properties.containsKey('KEY_ALIAS') && properties.containsKey('KEY_PASSWORD')) {
			return properties
		} else {
			throw new Exception("Some entries are missing ! Entry STORE_FILE, STORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD must be present in the signing.properties file.")
		}
	} else {
		throw new FileNotFoundException("File not found ! Please create a signing.properties file under root project.")
	}
}